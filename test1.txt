---ecr.tf
module "ecr-repo" {
  source           = "/home/ubuntu/scripts/modules/ecr"
  ecr_name         = var.ecr_name
  tags             = var.tags
  image_mutability = var.image_mutability

}

-----variables.tf
variable "ecr_name" {
  description = "The list of ecr names to create"
  type        = list(string)
  default     = null
}
variable "tags" {
  description = "The key-value maps for tagging"
  type        = map(string)
  default     = {}
}
variable "image_mutability" {
  description = "Provide image mutability"
  type        = string
  default     = "MUTABLE"
}

variable "encrypt_type" {
  description = "Provide type of encryption here"
  type        = string
  default     = "KMS"
}
------ variables.tfvars
tags = {
  "Environment" = "Prod-test"
}

ecr_name = [
  "pweb-ecr-repo-course-prod-test"
]
----backend.tf
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
  }
}

provider "aws" {
  region  = "ap-southeast-1"
  profile = "LHUB-531606804770"
}


-------modules
/data/scripts/modules/ecr

---data.tf
data "aws_caller_identity" "current" {}

---variables.tf
variable "ecr_name" {
  description = "The name of the ECR registry"
  type        = any
  default     = null
}

variable "image_mutability" {
  description = "Provide image mutability"
  type        = string
  default     = "IMMUTABLE"
}


variable "encrypt_type" {
  description = "Provide type of encryption here"
  type        = string
  default     = "KMS"
}

variable "tags" {
  description = "The key-value maps for tagging"
  type        = map(string)
  default     = {}
}

-----variables.tfvars 	
ecr_name = [
  "pweb-ecr-repo-course-prod-test"
]

--------main.tf
resource "aws_ecr_repository" "ecr" {
  for_each             = toset(["pweb-ecr-repo-course-prod-test"])
  name                 = each.key
  image_tag_mutability = var.image_mutability
  encryption_configuration {
    encryption_type = var.encrypt_type
  }
  image_scanning_configuration {
    scan_on_push = true
  }
  tags = var.tags
}
